{"version":3,"file":"static/js/589.82f4f9ea.chunk.js","mappings":"uRAEaA,EAAOC,EAAAA,GAAAA,GAAH,sBCAJC,EAAOD,EAAAA,GAAAA,GAAH,sBAEJE,EAAOF,EAAAA,GAAAA,EAAH,sBAEJG,EAAOH,EAAAA,GAAAA,KAAH,6C,SCQjB,EAXoB,SAAC,GAAyB,IAAvBI,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC7B,OACE,UAACJ,EAAD,YACE,UAACC,EAAD,YACE,SAACC,EAAD,sBADF,IACwBC,MAExB,SAACF,EAAD,UAAOG,QCKb,EAVoB,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACrB,OACE,SAACP,EAAD,UACGO,EAAWC,KAAI,gBAAGH,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASG,EAApB,EAAoBA,GAApB,OACd,SAAC,EAAD,CAAsBJ,OAAQA,EAAQC,QAASA,GAA7BG,SCwB1B,EA3BgB,WACd,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAoCE,EAAAA,EAAAA,UAAS,IAA7C,eAAOL,EAAP,KAAmBM,EAAnB,KACA,GAA4BD,EAAAA,EAAAA,UAAS,YAArC,eAAOE,EAAP,KAAeC,EAAf,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,mCAAG,WAAMP,GAAN,wFACDQ,EAAAA,EAAAA,IAAkBR,GADjB,UAEA,KADdS,EADc,QAEXC,OAFW,uBAGlBL,EAAU,YAHQ,0BAMpBF,EAAcM,GACdJ,EAAU,YAPU,2CAAH,sDASnBE,EAAcP,KACb,CAACA,IAEW,aAAXI,EACK,2CAGM,aAAXA,GACK,SAAC,EAAD,CAAaP,WAAYA,SADlC,I,oNCxBIc,EAAW,+BACXC,EAAM,mCAECC,EAAiB,mCAAG,6GAEVC,IAAAA,IAAA,UACdH,EADc,uCACyBC,IAHf,cAEvBH,EAFuB,yBAKtBA,EAAKA,KAAKM,SALY,gCAO7BC,EAAAA,OAAAA,QAAe,KAAMC,SAPQ,yDAAH,qDAWjBC,EAAiB,mCAAG,WAAMC,GAAN,gGAEVL,IAAAA,IAAA,UACdH,EADc,iCACmBC,EADnB,kBACgCO,IAHtB,cAEvBV,EAFuB,yBAKtBA,EAAKA,KAAKM,SALY,gCAO7BC,EAAAA,OAAAA,QAAe,KAAMC,SAPQ,yDAAH,sDAWjBG,EAAiB,mCAAG,WAAMrB,GAAN,gGAEVe,IAAAA,IAAA,UAAaH,EAAb,kBAA+BZ,EAA/B,oBAA6Ca,IAFnC,cAEvBH,EAFuB,yBAGtBA,EAAKA,MAHiB,gCAK7BO,EAAAA,OAAAA,QAAe,KAAMC,SALQ,yDAAH,sDASjBI,EAAiB,mCAAG,WAAMtB,GAAN,gGAEVe,IAAAA,IAAA,UACdH,EADc,kBACIZ,EADJ,4BAC0Ba,IAHhB,cAEvBH,EAFuB,yBAKtBA,EAAKA,KAAKa,MALY,gCAO7BN,EAAAA,OAAAA,QAAe,KAAMC,SAPQ,yDAAH,sDAWjBT,EAAiB,mCAAG,WAAMT,GAAN,gGAEVe,IAAAA,IAAA,UACdH,EADc,kBACIZ,EADJ,4BAC0Ba,IAHhB,cAEvBH,EAFuB,yBAKtBA,EAAKA,KAAKM,SALY,gCAO7BC,EAAAA,OAAAA,QAAe,KAAMC,SAPQ,yDAAH","sources":["components/ReviewsList/ReviewsList.styled.js","components/ReviewsItem/ReviewsItem.styled.js","components/ReviewsItem/ReviewsItem.jsx","components/ReviewsList/ReviewsList.jsx","components/Reviews/Reviews.jsx","helpers/fetchAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul``;\n","import styled from 'styled-components';\n\nexport const Item = styled.li``;\n\nexport const Text = styled.p``;\n\nexport const Span = styled.span`\n  font-weight: 700;\n`;\n","import PropTypes from 'prop-types';\nimport { Item, Text, Span } from './ReviewsItem.styled';\n\nconst ReviewsItem = ({ author, content }) => {\n  return (\n    <Item>\n      <Text>\n        <Span>Author:</Span> {author}\n      </Text>\n      <Text>{content}</Text>\n    </Item>\n  );\n};\n\nexport default ReviewsItem;\n\nReviewsItem.propTypes = {\n  author: PropTypes.string.isRequired,\n  content: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { List } from './ReviewsList.styled';\nimport ReviewsItem from 'components/ReviewsItem';\n\nconst ReviewsList = ({ reviewsArr }) => {\n  return (\n    <List>\n      {reviewsArr.map(({ author, content, id }) => (\n        <ReviewsItem key={id} author={author} content={content} />\n      ))}\n    </List>\n  );\n};\n\nexport default ReviewsList;\n\nReviewsList.propTypes = {\n  reviewsArr: PropTypes.arrayOf(\n    PropTypes.shape({\n      author: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { fetchMovieReviews } from 'helpers/fetchAPI';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport ReviewsList from 'components/ReviewsList';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviewsArr, setReviewsArr] = useState([]);\n  const [status, setStatus] = useState('resolved');\n\n  useEffect(() => {\n    const getReviewsArr = async movieId => {\n      const data = await fetchMovieReviews(movieId);\n      if (data.length === 0) {\n        setStatus('rejected');\n        return;\n      }\n      setReviewsArr(data);\n      setStatus('resolved');\n    };\n    getReviewsArr(movieId);\n  }, [movieId]);\n\n  if (status === 'rejected') {\n    return \"We don't have any reviews for this movie\";\n  }\n\n  if (status === 'resolved') {\n    return <ReviewsList reviewsArr={reviewsArr} />;\n  }\n};\n\nexport default Reviews;\n","import axios from 'axios';\nimport { Notify } from 'notiflix';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst KEY = '3aee21951118aea271842c595cb04969';\n\nexport const fetchMovieOnTrend = async () => {\n  try {\n    const data = await axios.get(\n      `${BASE_URL}/trending/movie/day?api_key=${KEY}`\n    );\n    return data.data.results;\n  } catch (error) {\n    Notify.failure(error.message);\n  }\n};\n\nexport const fetchSearchMovies = async searchTerm => {\n  try {\n    const data = await axios.get(\n      `${BASE_URL}/search/movie?api_key=${KEY}&query=${searchTerm}`\n    );\n    return data.data.results;\n  } catch (error) {\n    Notify.failure(error.message);\n  }\n};\n\nexport const fetchMovieDetails = async id => {\n  try {\n    const data = await axios.get(`${BASE_URL}/movie/${id}?api_key=${KEY}`);\n    return data.data;\n  } catch (error) {\n    Notify.failure(error.message);\n  }\n};\n\nexport const fetchMovieCredits = async id => {\n  try {\n    const data = await axios.get(\n      `${BASE_URL}/movie/${id}/credits?api_key=${KEY}`\n    );\n    return data.data.cast;\n  } catch (error) {\n    Notify.failure(error.message);\n  }\n};\n\nexport const fetchMovieReviews = async id => {\n  try {\n    const data = await axios.get(\n      `${BASE_URL}/movie/${id}/reviews?api_key=${KEY}`\n    );\n    return data.data.results;\n  } catch (error) {\n    Notify.failure(error.message);\n  }\n};\n"],"names":["List","styled","Item","Text","Span","author","content","reviewsArr","map","id","movieId","useParams","useState","setReviewsArr","status","setStatus","useEffect","getReviewsArr","fetchMovieReviews","data","length","BASE_URL","KEY","fetchMovieOnTrend","axios","results","Notify","message","fetchSearchMovies","searchTerm","fetchMovieDetails","fetchMovieCredits","cast"],"sourceRoot":""}