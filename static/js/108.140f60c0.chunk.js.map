{"version":3,"file":"static/js/108.140f60c0.chunk.js","mappings":"uRAEaA,EAAOC,EAAAA,GAAAA,GAAH,uECAJC,EAAOD,EAAAA,GAAAA,GAAH,+CAIJE,EAAQF,EAAAA,GAAAA,IAAH,8DAKLG,EAAOH,EAAAA,GAAAA,EAAH,sB,SCGjB,EAXiB,SAAC,GAA2B,IAAzBI,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KACzBC,EAAQ,yCAAqCH,GACnD,OACE,UAACH,EAAD,WACGG,IAAS,SAACF,EAAD,CAAOM,IAAKD,EAAUE,IAAKJ,KACrC,SAACF,EAAD,UAAOE,KACP,UAACF,EAAD,yBAAkBG,SCKxB,EAViB,SAAC,GAAiB,IAAfI,EAAc,EAAdA,QAClB,OACE,SAACX,EAAD,UACGW,EAAQC,KAAI,gBAAGC,EAAH,EAAGA,aAAcP,EAAjB,EAAiBA,KAAMQ,EAAvB,EAAuBA,UAAWC,EAAlC,EAAkCA,GAAlC,OACX,SAAC,EAAD,CAAmBV,MAAOQ,EAAcP,KAAMA,EAAMC,KAAMO,GAA3CC,SCavB,EAfa,WACX,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOP,EAAP,KAAgBQ,EAAhB,KAUA,OARAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,WAAML,GAAN,wFACEM,EAAAA,EAAAA,IAAkBN,GADpB,OACXO,EADW,OAEjBJ,EAAWI,GAFM,2CAAH,sDAIhBF,EAAWL,KACV,CAACA,IAEGL,EAAQa,OAAS,IAAK,SAAC,EAAD,CAAUb,QAASA,M,oNCf5Cc,EAAW,+BACXC,EAAM,mCAECC,EAAiB,mCAAG,6GAEVC,IAAAA,IAAA,UACdH,EADc,uCACyBC,IAHf,cAEvBH,EAFuB,yBAKtBA,EAAKA,KAAKM,SALY,gCAO7BC,EAAAA,OAAAA,QAAe,KAAMC,SAPQ,yDAAH,qDAWjBC,EAAiB,mCAAG,WAAMC,GAAN,gGAEVL,IAAAA,IAAA,UACdH,EADc,iCACmBC,EADnB,kBACgCO,IAHtB,cAEvBV,EAFuB,yBAKtBA,EAAKA,KAAKM,SALY,gCAO7BC,EAAAA,OAAAA,QAAe,KAAMC,SAPQ,yDAAH,sDAWjBG,EAAiB,mCAAG,WAAMnB,GAAN,gGAEVa,IAAAA,IAAA,UAAaH,EAAb,kBAA+BV,EAA/B,oBAA6CW,IAFnC,cAEvBH,EAFuB,yBAGtBA,EAAKA,MAHiB,gCAK7BO,EAAAA,OAAAA,QAAe,KAAMC,SALQ,yDAAH,sDASjBT,EAAiB,mCAAG,WAAMP,GAAN,gGAEVa,IAAAA,IAAA,UACdH,EADc,kBACIV,EADJ,4BAC0BW,IAHhB,cAEvBH,EAFuB,yBAKtBA,EAAKA,KAAKY,MALY,gCAO7BL,EAAAA,OAAAA,QAAe,KAAMC,SAPQ,yDAAH,sDAWjBK,EAAiB,mCAAG,WAAMrB,GAAN,gGAEVa,IAAAA,IAAA,UACdH,EADc,kBACIV,EADJ,4BAC0BW,IAHhB,cAEvBH,EAFuB,yBAKtBA,EAAKA,KAAKM,SALY,gCAO7BC,EAAAA,OAAAA,QAAe,KAAMC,SAPQ,yDAAH","sources":["components/CastList/CastList.styled.js","components/CastItem/CastItem.styled.js","components/CastItem/CastItem.jsx","components/CastList/CastList.jsx","components/Cast/Cast.jsx","helpers/fetchAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  padding-top: 10px;\n  padding-bottom: 10px;\n`;\n","import styled from 'styled-components';\n\nexport const Item = styled.li`\n  padding-left: 20px;\n`;\n\nexport const Photo = styled.img`\n  max-width: 100px;\n  height: auto;\n`;\n\nexport const Text = styled.p``;\n","import PropTypes from 'prop-types';\nimport { Item, Photo, Text } from './CastItem.styled';\n\nconst CastItem = ({ photo, name, char }) => {\n  const photoURL = `https://image.tmdb.org/t/p/w300${photo}`;\n  return (\n    <Item>\n      {photo && <Photo src={photoURL} alt={name} />}\n      <Text>{name}</Text>\n      <Text>Character: {char}</Text>\n    </Item>\n  );\n};\n\nexport default CastItem;\n\nCastItem.propTypes = {\n  photo: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  char: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { List } from './CastList.styled';\nimport CastItem from 'components/CastItem';\n\nconst CastList = ({ castArr }) => {\n  return (\n    <List>\n      {castArr.map(({ profile_path, name, character, id }) => (\n        <CastItem key={id} photo={profile_path} name={name} char={character} />\n      ))}\n    </List>\n  );\n};\n\nexport default CastList;\n\nCastList.propTypes = {\n  castArr: PropTypes.arrayOf(\n    PropTypes.shape({\n      profile_path: PropTypes.string,\n      name: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n    })\n  ).isRequired,\n};\n","import { fetchMovieCredits } from 'helpers/fetchAPI';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport CastList from 'components/CastList';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [castArr, setCastArr] = useState([]);\n\n  useEffect(() => {\n    const getCastArr = async movieId => {\n      const data = await fetchMovieCredits(movieId);\n      setCastArr(data);\n    };\n    getCastArr(movieId);\n  }, [movieId]);\n\n  return castArr.length > 0 && <CastList castArr={castArr} />;\n};\n\nexport default Cast;\n","import axios from 'axios';\nimport { Notify } from 'notiflix';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst KEY = '3aee21951118aea271842c595cb04969';\n\nexport const fetchMovieOnTrend = async () => {\n  try {\n    const data = await axios.get(\n      `${BASE_URL}/trending/movie/day?api_key=${KEY}`\n    );\n    return data.data.results;\n  } catch (error) {\n    Notify.failure(error.message);\n  }\n};\n\nexport const fetchSearchMovies = async searchTerm => {\n  try {\n    const data = await axios.get(\n      `${BASE_URL}/search/movie?api_key=${KEY}&query=${searchTerm}`\n    );\n    return data.data.results;\n  } catch (error) {\n    Notify.failure(error.message);\n  }\n};\n\nexport const fetchMovieDetails = async id => {\n  try {\n    const data = await axios.get(`${BASE_URL}/movie/${id}?api_key=${KEY}`);\n    return data.data;\n  } catch (error) {\n    Notify.failure(error.message);\n  }\n};\n\nexport const fetchMovieCredits = async id => {\n  try {\n    const data = await axios.get(\n      `${BASE_URL}/movie/${id}/credits?api_key=${KEY}`\n    );\n    return data.data.cast;\n  } catch (error) {\n    Notify.failure(error.message);\n  }\n};\n\nexport const fetchMovieReviews = async id => {\n  try {\n    const data = await axios.get(\n      `${BASE_URL}/movie/${id}/reviews?api_key=${KEY}`\n    );\n    return data.data.results;\n  } catch (error) {\n    Notify.failure(error.message);\n  }\n};\n"],"names":["List","styled","Item","Photo","Text","photo","name","char","photoURL","src","alt","castArr","map","profile_path","character","id","movieId","useParams","useState","setCastArr","useEffect","getCastArr","fetchMovieCredits","data","length","BASE_URL","KEY","fetchMovieOnTrend","axios","results","Notify","message","fetchSearchMovies","searchTerm","fetchMovieDetails","cast","fetchMovieReviews"],"sourceRoot":""}